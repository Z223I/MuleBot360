#!/usr/bin/env python3

from Adafruit_PWM_Servo_Driver import PWM
import sys
sys.path.append("/home/pi/pythondev/RangeBot/RangeBot")
from RangeBot import RangeBot

import time

import RPi.GPIO as GPIO
import threading
import queue
import re
import os
import math

import pdb
import logging
loggerMB = logging.getLogger(__name__)
hdlr = logging.FileHandler('MuleBot.log')
formatter = logging.Formatter('%(asctime)s %(levelname)s %(message)s')
hdlr.setFormatter(formatter)
loggerMB.addHandler(hdlr) 
loggerMB.setLevel(logging.FATAL)



class MuleBot:

  """ Class MuleBot
  This class accepts driving commands from the keyboard and it also has
  a target mode where it drives to the target."""

  WHEEL_RADIUS = 2
  # Apparently, in the robot world, the distrance between the two motor
  # driven wheels is called wheel base length.
  WHEEL_BASE_LENGTH = 20
  SECONDS_PER_MINUTE = 60
  MAX_RPM = 12
  RADIANS_IN_CIRCLE = 2.0
  MAX_Radians_PM = RADIANS_IN_CIRCLE * MAX_RPM
  # MAX_RPS = Maximum Radians Per Second
  MAX_RPS = MAX_Radians_PM / SECONDS_PER_MINUTE
  INCHES_PER_METER = 39.3701
  CIRCUM_IN = RADIANS_IN_CIRCLE * math.pi * WHEEL_RADIUS
  CIRCUM_M = CIRCUM_IN / INCHES_PER_METER
    
  dcMotorPWMDurationLeft = 0
  dcMotorPWMDurationRight = 0


  def __init__(self):
    """
    __init__ initializes class variables.
    """

    global GPIO

    # running is used to control thread execution.
    self._running = True

    # Keep MuleBot parallel to the wall at this distance.
    self.distanceToWall = 0


    self.pwmEnablePin       = 23 # Broadcom pin 23 was 16
    self.motor1DirectionPin = 24 # Broadcom pin 24 was 20
    self.motor2DirectionPin = 25 # Broadcom pin 25 was 21

    self.motorForward = GPIO.HIGH
    self.motorReverse = GPIO.LOW


    self.dcMotorLeftMotor  = 0
    self.dcMotorRightMotor = 1

    self.laserDetectLeftPin  = 6
    self.laserDetectRightPin = 5

    self.motorMaxRPM = 12.0
    self.motorMaxRadiansPM = 2 * self.motorMaxRPM

    # Pin Setup:
    GPIO.setwarnings(False)
    GPIO.setmode(GPIO.BCM) # Broadcom pin-numbering scheme
    GPIO.setup(self.pwmEnablePin,       GPIO.OUT)
    GPIO.setup(self.motor1DirectionPin, GPIO.OUT)
    GPIO.setup(self.motor2DirectionPin, GPIO.OUT)

    GPIO.output(self.pwmEnablePin,       GPIO.LOW )

    # This is interupts setups.  They get used with the
    # test() method.
    #GPIO.setup(laserDetectLeftPin,  GPIO.IN, pull_up_down=GPIO.PUD_UP)
    #GPIO.setup(laserDetectRightPin, GPIO.IN, pull_up_down=GPIO.PUD_UP)

    #GPIO.add_event_detect(laserDetectLeftPin,  GPIO.FALLING, callback=myInt)
    #GPIO.add_event_detect(laserDetectRightPin, GPIO.FALLING, callback=myInt)


    # Initialise the PWM device using the default address
    self.pwm = PWM(0x40)
    # Note if you'd like more debug output you can instead run:
    #pwm = PWM(0x40, debug=True)


    #count = 1
    self.pwm.setPWMFreq(1000)                        # Set frequency to 1000 Hz

    self.tgt_min_range = 15


  def terminate(self):
    """terminate is for stopping the thread."""
    self._running = False



  def mps_to_rps(self, mps):
      """
      mps_to_rps transforms meters per second to radians per second.

      @type: float
      @param: mps (meters per second)

      @rtype: float
      @param: rps (radians per second)
      """

      rps = mps * 2 / MuleBot.CIRCUM_M
      return rps

  def rps_to_mps(self, rps):
      """
      rps_to_mps transforms radians per second to meters per second.

      If rps = 2.0, then mps should equal MuleBot.CIRCUM_M because there are
      2.0 radians in a circle.

      @type: float
      @param: rps (radians per second)

      @rtype: float
      @param: mps (meters per second)
      """

      mps = rps * MuleBot.CIRCUM_M / 2
      return mps

  def rps_to_rpm(self, rps):
      """
      rps_to_rpm transforms radians per second to RPM.

      @type: float
      @param: rps (radians per second)

      @rtype: float
      @param: rpm
      """

      rpm = rps * MuleBot.SECONDS_PER_MINUTE / MuleBot.RADIANS_IN_CIRCLE
      return rpm

  def rpm_to_rps(self, rpm):
      """
      rpm_to_rps transforms RPM to radians per second.

      @type: float
      @param: rpm

      @rtype: float
      @param: rps
      """

      rps = rpm / MuleBot.SECONDS_PER_MINUTE * MuleBot.RADIANS_IN_CIRCLE
      return rps

  def rpm_to_mps(self, rpm):
      """
      rpm_to_mps transforms RPM to meters per second.

      @type: float
      @param: rpm

      @rtype: float
      @param: mps
      """

      mps = rpm / 60 * MuleBot.CIRCUM_M
      return mps




  def v(self):
      """v returns the velocity in meters per second."""

      # TODO This translation formula works, but needs simplified.

      # PWM duration can go from 0 to 4095 with 4095 representing max rpm
#      print("MuleBot.v  MuleBot.dcMotorPWMDurationLeft:", MuleBot.dcMotorPWMDurationLeft)
      speed_percentage = float(MuleBot.dcMotorPWMDurationLeft) / 4095.0
#      print("speed_percentage: ", speed_percentage)

      rpm = speed_percentage * self.motorMaxRPM
#      print("rpm: ", rpm)

      secondsPerMinute = 60
      revs_per_second = rpm / secondsPerMinute
#      print("--revs_per_second", revs_per_second)

      inches_per_rev = 2.0 * math.pi * MuleBot.WHEEL_RADIUS
      INCHES_PER_METER = 39.3701
      meters_per_rev =  inches_per_rev / INCHES_PER_METER
#      print("--meters_per_rev", meters_per_rev)

      meters_per_second = meters_per_rev * revs_per_second

#      print("--meters_per_second: ", meters_per_second)
      return meters_per_second




  # I don't think setServoPulse is ever called.
  # Is the pulse parameter ever used?

  #servoMin = 4096 / 12  # Min pulse length out of 4096
  #servoMax = 4095       # Max pulse length out of 4096

  def setServoPulse(channel, pulse):
    """setServoPulse"""

    pulseLength = 1000000                   # 1,000,000 us per second
    pulseLength /= 60                       # 60 Hz
    print ("%d us per period" % pulseLength)
    pulseLength /= 4096                     # 12 bits of resolution
    print ("%d us per bit" % pulseLength)
    pulse *= 1000
    pulse /= pulseLength
    self.pwm.setPWM(channel, 0, pulse)

  def set_wheel_drive_rates(self, v_l, v_r):
      #TODO Update this to handle nevative velocities.

      """ set_wheel_drive_rates set the drive rates of the wheels to the 
      specified velocities (rads/s).  The velocities are converted to RPM.


      @type v_l:  float
      @param v_l: velocity left wheel (rads/s)

      @type v_r: float
      @param v_r: velocity right wheel (rads/s)

      """

      # convert to rpm
#      print(">>v_l: ", v_l)
#      print(">>v_r: ", v_r)
      rpm_l = self.rps_to_rpm(v_l)
      rpm_r = self.rps_to_rpm(v_r)
#      print(">>rpm_l: ", rpm_l)
#      print(">>rpm_r: ", rpm_r)

      self.motorSpeed(rpm_l, rpm_r)
      return rpm_l, rpm_r

  def forward(self, inches):
        revolutions = inches / MuleBot.CIRCUM_IN
        
        rpm = MuleBot.MAX_RPM
        
        minutes = revolutions / rpm
        
        seconds = minutes * MuleBot.SECONDS_PER_MINUTE
        
        v = self.rpm_to_rps(rpm)
        self.set_wheel_drive_rates(v, v)
        
        time.sleep(seconds)
        self.stop()
        
  def stop(self):
        v_l = 0
        v_r = 0
        self.set_wheel_drive_rates(v_l, v_r)
    
  def u_turn(self, direction, diameter_in):
        """u_turn performs an 180 turn either to the 'left' or right based
        on the diameter of the turn in inches.
        
        @type: string
        @param: direction
        
        @type: float
        @type: diameter_in
        """
    
#        pdb.set_trace()
        # Calculate radius of turn for the inside wheel.
        r_in = diameter_in / 2

        # Outside radius is 20 inches from inside radius.
        r_out = r_in + MuleBot.WHEEL_BASE_LENGTH
        
        # Outside travel distance
        travel = r_out * 3.14159
        travel_revolutions = travel / MuleBot.CIRCUM_IN
        
        r_ratio = r_out / r_in
        #r_ratio_half = r_ratio / 2

        speed_multiplier = MuleBot.MAX_RPM / r_ratio

        outside_rpm = r_ratio * speed_multiplier
        inside_rpm = speed_multiplier
            
        
        # 
        # minutes at outside_rpm
        minutes = travel_revolutions / outside_rpm
        seconds = minutes * MuleBot.SECONDS_PER_MINUTE
        
        # Something isn't quite perfect.
        if direction == 'left':
            if diameter_in < 25:
                seconds -= 1
            else:
                seconds -= 2
        else:
            if diameter_in < 25:
                seconds += 1
            else:
                seconds += 2

        if direction == 'left':
            v_l = self.rpm_to_rps(inside_rpm)
            v_r = self.rpm_to_rps(outside_rpm)
        else:
            v_r = self.rpm_to_rps(inside_rpm)
            v_l = self.rpm_to_rps(outside_rpm)

        #print("2inside:   rpm: ", inside_rpm)
        #print("2outside:   rpm: ", outside_rpm)
        
        #print("2.1:   v_l: ", v_l)
        #print("2.1:   v_r: ", v_r)

        # Set wheel drive rates.
        self.set_wheel_drive_rates(v_l, v_r)

        # Sleep during the turn.
        time.sleep(seconds)

        # Stop
        self.stop()
        
        # Move forward 24 inches.
        self.forward(24)

  def u_turn_supervisor(self, command):
        __doc__ = """u_turn_supervisor parses u_turn commands and then 
        calls u_turn.
        
        Examples: 'ul10' makes a left-handed u_turn with a 10" diameter.
                   'ur40' makes a right-handed u_turn with a 40" diameter.
                        
        @type: string
        @param: command"""
    
        # strip the initial 'u'
        command = command[1:]
        if len(command) > 0:
            if command[0] == 'l':
                direction = 'left'
            else:
                direction = 'right'
                
        # strip the direction
        command = command[1:]

        if len(command) > 0:
            diameter = int(command)
            self.u_turn(direction, diameter)
                            

  def _uni_to_diff(self, v, omega):

    """
    _uni_to_diff The is a "unicycle model".  It performs a unicycle to 
    "differential drive model" mathematical translation.

    NB: The input/output variable are in DIFFERENT units!  This is because
    the units of R are (meters/radian) does the conversion.

    This came from the 'Sobot Rimulator' by Nick McCrea.

    @type v:  float
    @param v: velocity (m/s)

    @type omega: float
    @param omega: angular velocity (rads/s)

    @rtype: float
    @return: v_l velocity left wheel (rads/s)

    @rtype: float
    @return: v_r velocity right wheel (rads/s)
    """

#    print("--MuleBot._uni_to_diff({:.3f}, {:.3f})".format(v, omega))
    loggerMB.debug("--MuleBot._uni_to_diff({:.3f}, {:.3f})".format(v, omega))

    # v = translation velocity (m/s)
    # omega = angular velocity (rad/s)

    # For some reason, it is necessary to multiply the angle by -1.
    # TODO: Probably have to put this back in.
    omega *= -1.0

    inches_per_meter = 39.3701
    circumference_in = 2.0 * math.pi * MuleBot.WHEEL_RADIUS
    circumference_m = circumference_in / inches_per_meter
    radians_per_circumference = 2.0
    # R = roll?(meters/radian)
    R = circumference_m / radians_per_circumference

    # Get info in inches
    Lin = MuleBot.WHEEL_BASE_LENGTH
    # Convert inches to meters
    Lm = Lin / inches_per_meter

    # All measurements are now metric.
    v_l = ( (2.0 * v) - (omega * Lm) ) / (2.0 * R)
    v_r = ( (2.0 * v) + (omega * Lm) ) / (2.0 * R)
    loggerMB.debug("--MuleBot._uni_to_diff v_l, v_r: {:.3f}, {:.3f}".format(v_l, v_r))

    rpm_l = self.rps_to_rpm(v_l)
    rpm_r = self.rps_to_rpm(v_r)
#    print("--MuleBot._uni_to_diff rpm_l, rpm_r: {:.3f}, {:.3f}".format(rpm_l, rpm_r))
    loggerMB.debug("--MuleBot._uni_to_diff rpm_l, rpm_r: {:.3f}, {:.3f}".format(rpm_l, rpm_r))

    return v_l, v_r

  def motorDirection(self, motorPin, direction):
    """
    motorDirection sets the direction of a single motor.
    
    Keyword arguments:
    motorPin -- Integer representing the direction pin for a specific motor.
    
    direction -- Single bit representing fowards or backwards.
    
    Usage:
        self.motorDirection(self.motor1DirectionPin, self.motorReverse)
    """
    #  print "motorPin: ", motorPin
    #  print "direction: ",  direction
    GPIO.output(motorPin, direction)


  def motorsDirection(self, direction):
    """
    motorsDirection sets the direction of both motors to the same direction.
    
    Keyword arguments:
    direction -- single character
    """

    print (direction)
    if direction == 'r' or direction == 'R':
      self.motorDirection(self.motor1DirectionPin, self.motorReverse)
      self.motorDirection(self.motor2DirectionPin, self.motorReverse)
      print ("Direction reverse")
    else:
      self.motorDirection(self.motor1DirectionPin, self.motorForward)
      self.motorDirection(self.motor2DirectionPin, self.motorForward)
      print ("Direction forward")

  def dcMotorLeftTurn(self, duration):
    """dcMotorLeftTurn"""

    print ("From dcMotorLeftTurn: ", MuleBot.dcMotorPWMDurationLeft)
    tempPWMDurationLeft = int( MuleBot.dcMotorPWMDurationLeft * 70 / 100 )  # 98
    self.pwm.setPWM(self.dcMotorLeftMotor, 0, tempPWMDurationLeft)

    # Duration of the turn  
    time.sleep(duration)

    # Go straight
    self.pwm.setPWM(self.dcMotorLeftMotor, 0, MuleBot.dcMotorPWMDurationLeft)


  def dcMotorRightTurn(self, duration):
    """dcMotorRightTurn"""

    tempPWMDurationRight = int( MuleBot.dcMotorPWMDurationRight * 70 / 100 )
    self.pwm.setPWM(self.dcMotorRightMotor, 0, tempPWMDurationRight)

    # Duration of the turn  
    time.sleep(duration)

    # Go straight
    self.pwm.setPWM(self.dcMotorRightMotor, 0, MuleBot.dcMotorPWMDurationRight)

  def constrainSpeed(self, speedRPM):
      """constrainSpeed ensures 0 <= speedRPM <= max.

      @type speedRPM: float
      @param speedRPM: wheel speedRPM (rpm)

      @rtype: float
      @return: constrained wheel speed (rpm)
      """

      if speedRPM > self.motorMaxRPM:
        speedRPM = self.motorMaxRPM

      if speedRPM < 0.0:
        speedRPM = 0.0

#      print ( "motorSpeed RPM adjusted: ", speedRPM )

      return speedRPM

  def motors__Direction(self, speed_l, speed_r):
    """motorDirection sets the direction of the motors based on the sign of
    the speed.

    @type: float
    @param: speed_l

    @type: float
    @param: speed_r

    """

    if speed_l >= 0:
      self.motorDirection(self.motor1DirectionPin, self.motorForward)
    else:
      self.motorDirection(self.motor1DirectionPin, self.motorReverse)

    if speed_r >= 0:
      self.motorDirection(self.motor2DirectionPin, self.motorForward)
    else :
      self.motorDirection(self.motor2DirectionPin, self.motorReverse)



  def motorSpeed(self, speedRPM_l, speedRPM_r):
    """motorSpeed sets the speed of the motors to the supplied rpm.  This has
    been updated to handle negative speeds.

    @type: float
    @param: speedRPM_l (rpm)

    @type: float
    @param: speedRPM_r (rpm)

    """

    self.motors__Direction(speedRPM_l, speedRPM_r)

    speedRPM_l = abs(speedRPM_l)
    speedRPM_r = abs(speedRPM_r)

    speedRPM_l = self.constrainSpeed(speedRPM_l)
    speedRPM_r = self.constrainSpeed(speedRPM_r)

#   Left motor
    pwmDuration = 4095.0 * speedRPM_l / self.motorMaxRPM
#    print("MuleBot.motorSpeed Duration left float: ", pwmDuration)
    pwmDuration = int( pwmDuration )
#    print("MuleBot.motorSpeed Duration left int: ", pwmDuration)
    startOfPulse = 0
    self.pwm.setPWM(self.dcMotorLeftMotor, startOfPulse, pwmDuration)
    MuleBot.dcMotorPWMDurationLeft = pwmDuration

#   Right motor
    #Adjust for right motor being faster
    pwmDuration = 4095.0 * speedRPM_r / self.motorMaxRPM
    pwmDuration = pwmDuration * 9727 / 10000  # 98.519113 percent
    pwmDuration = int( pwmDuration )
#    print("MuleBot.motorSpeed Duration right int: ", pwmDuration)
    startOfPulse = 0
    self.pwm.setPWM(self.dcMotorRightMotor, startOfPulse, pwmDuration)
    MuleBot.dcMotorPWMDurationRight = pwmDuration


  def init(self):
    """init"""

    junk = 0
    # This is all interupt stuff for calibrating the speed
    # of the wheels.
    #self.interruptLeftCount  = -2
    #self.interruptRightCount = -2
    #self.startTimeLeft  = 0
    #self.startTimeRight = 0
    #self.lastTimeLeft   = 0
    #self.lastTimeRight  = 0



  def run1(self, _q1, _q2,_qWallDistance):

      """run1 is used to navigate the MuleBot to
       a desired distance from the wall.

       This method is a thread.

       _q1 is the current distance to the wall.
       _qWallDistance is used occasionally to establish
       the desire distance.

       _q2 is used to send steering directions to the run2 thread."""


      timeInRightTurn = 0
      timeInLeftTurn = 0

      while self._running:
          #name = threading.currentThread().getName()
          #print "Consumer thread 1:  ", name

          # This method is the only consumer of _qWallDistance.
          # Therefore checking if the queue is empty works.
          # In a multi-consumer environment, check empty()
          # can cause a race condition.
          if _qWallDistance.empty():
              pass
          else:
              self.distanceToWall = _qWallDistance.get()
              _qWallDistance.task_done()






          currentDistance = _q1.get();
          print ("Current distance: ", currentDistance)

          qSize = _q1.qsize()
          if qSize > 1:
            print ( "***** Distance Queue Size: ", qSize, " *****" )

          # Are we navigating?
          navigating = (self.distanceToWall > 0)
          if navigating:
              print ("Desired distance: ", self.distanceToWall)

              accuracy = 0.5
              # Navigate
              if currentDistance < self.distanceToWall - accuracy:
                  print ("Turn right >>>")
                  timeInRightTurn += 1
                  _q2.put('s1')
              elif currentDistance > self.distanceToWall + accuracy:
                  print ("Turn left <<<")
                  timeInLeftTurn += 1
                  _q2.put('p1')
              else:
                  if ( timeInRightTurn > 0 ):
                      for i in range( timeInRightTurn ):
                          _q2.put('p1')
                      # Reset the time
                      timeInRightTurn = 0
                  if ( timeInLeftTurn > 0 ):
                      for i in range( timeInLeftTurn ):
                          _q2.put('s1')
                      # Reset the time
                      timeInLeftTurn = 0
                  print ("On path.")
          # end if 

          _q1.task_done()


  def lidarNav_queue_check(self, q_lidar_nav, tgt_range, tgt_width):
          target_range = tgt_range
          target_width = tgt_width

          # The leading 'n' has been stripped of in the run2 thread.
          if not q_lidar_nav.empty():
             command = q_lidar_nav.get()
             command = command.lower()

             first_char = 0
             if command[first_char] == 'r':
               target_range = float( command[1:] )
             if command[first_char] == 'w':
               target_width = float( command[1:] )

          return target_range, target_width





  def lidarNav_should_i_stay_or_should_i_go(self, tgt_range, angle):
      """lidarNav_should_i_stay_or_should_i_go will stay/stop if MuleBot is
      too close to the target.  Otherwise, it will go/continue.

      @type tgt_range: float
      @param : (inches)

      @type angle: float
      @param : (degrees)

      @rtype: float
      @return: target_range (inches)

      @rtype: float
      @return: angle (radians)
      """
      # Stop if we are too close to the target
      if tgt_range < self.tgt_min_range:
          v_l = 0
          v_r = 0
          self.set_wheel_drive_rates(v_l, v_r)

          # setting the range to zero will stop navigating.
          target_range = 0
          angle_rad = None

      else:
          # Use the updated range for the next run.
          target_range = tgt_range

          # Turn based on the angle to target.
          # Positive angles are left.
          # Negative angles are right.

          # Convert from degrees to radians.
          angle_rad = math.radians(angle)

      return target_range, angle_rad



  def velocity_check(self, v_l, v_r):
      """velocity_check slows down the velocities of the two wheels to stay
      between +-MAX_RPS. 


      @type: float
      @param: v_l (radians per second)

      @type: float
      @param: v_r (radians per second)

      @rtype: float
      @param: v_l_prime (radians per second)

      @rtype: float
      @param: v_r_prime (radians per second)

      @rtype: float
      @param: turn_duration (seconds)
      """

      if v_l == v_r:
          turn_duration = 0
          return v_l, v_r, turn_duration

      # Assumption: The robot is going forward or is stationary when it is
      #             hunting for the target, i.e., v >= 0.
      # Assumption: It is not known which direction the robot needs to turn.
      # Fact:       The return values of the _uni_to_diff method are symetrical
      #             about v.
      # Conclusion: Therefore it is only necessary to consider the larger of
      #             v_l and v_r to determine the turn duration due to the RPM
      #             limit of the motors.

      vel_max = max(v_l, v_r)